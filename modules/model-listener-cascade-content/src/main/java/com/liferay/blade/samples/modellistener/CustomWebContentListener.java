package com.liferay.blade.samples.modellistener;

import com.liferay.journal.model.JournalArticle;
import com.liferay.journal.service.JournalArticleLocalService;
import com.liferay.portal.kernel.exception.ModelListenerException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.BaseModelListener;
import com.liferay.portal.kernel.model.Group;
import com.liferay.portal.kernel.model.ModelListener;
import com.liferay.portal.kernel.service.GroupLocalServiceUtil;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

@Component(immediate = true, service = ModelListener.class)
public class CustomWebContentListener extends BaseModelListener<JournalArticle> {
	
	private static String REPLICATION_FOLDER_NAME="replicate";//TODO:change this and put whatever you want here

	@Override
	public void onAfterUpdate(JournalArticle model) throws ModelListenerException {

		///FIRST, MAKE SURE THAT WE DON'T ENTER EN INFINITE LOOP
		if(model.getVersion()>1.0)return;
		long millisecondsAgo = ((new Date()).getTime()-model.getCreateDate().getTime());
		if(millisecondsAgo>1500)return; // if that is the case it is not a new article but an edited one
		try{
			int id = Integer.parseInt(model.getUrlTitle().trim());
			int artId = Integer.parseInt(model.getArticleId());
			if(id>artId)return; //RETURN IF autogenerated
		}catch(Exception ex) { /* this is the case want */} //TODO: there are cleaner ways to do this, this is just an example
		
		//THEN, FOR EACH CHILD SITE, Copy the article, and change the title (in all languages), making sure it's the LATEST VERSION
		Map<String, byte[]> images=null;
		try {
			long userId = UserLocalServiceUtil.getDefaultUser(model.getCompanyId()).getUserId();
			Group group = GroupLocalServiceUtil.getGroup(model.getGroupId());
			List<Group> children = group.getChildren(true);
			if(  model.getFolder().getName().trim().equalsIgnoreCase(REPLICATION_FOLDER_NAME.trim()) && children!=null && children.size()>0 && !model.getUrlTitle().matches(".*Duplicate.*")) {
				children.stream().forEach(ch->{
					ServiceContext serviceContext = new ServiceContext();
					serviceContext.setScopeGroupId(ch.getGroupId());
					try {
						JournalArticle newArticle = journalService.copyArticle(userId,model.getGroupId(),model.getArticleId(),null, Boolean.TRUE, model.getVersion());
						newArticle.setFolderId(0);
						newArticle.setGroupId(ch.getGroupId());
						Map<Locale, String> newTitles= new HashMap<>();
						model.getTitleMap().keySet().stream().forEach(locale->{ newTitles.put(locale, model.getTitle(locale)); });
						newArticle.setTitleMap(newTitles);
						model.getTitleMap().keySet().stream().forEach(locale->{ 
							try {
								journalService.updateArticleTranslation(ch.getGroupId(), newArticle.getArticleId(), newArticle.getVersion(), locale, model.getTitle(locale), model.getDescription(locale), model.getContent(), images, serviceContext);
								JournalArticle latestVersionNewArticle= journalService.getLatestArticle(ch.getGroupId(), newArticle.getArticleId());
								latestVersionNewArticle.setStatus(WorkflowConstants.STATUS_APPROVED);
								latestVersionNewArticle.persist();
							} catch (Exception e) { e.printStackTrace(); }
						});
					} catch (PortalException e) { e.printStackTrace(); }
				});
			}
		} catch (PortalException e) { e.printStackTrace(); }
	}
	@Reference JournalArticleLocalService journalService;
}